// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Admin{
  id        String     @id @default(uuid())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  role      Role       @default(ADMIN)
  image     String?
  isActive  Boolean    @default(true)
  Course    Course[]
  Module    Module[]
  lesson    lesson[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime   @updatedAt



  Session   Session[]
}


model User{
  id        String    @id @default(uuid())
  FirstName String
  lastName  String
  email     String    @unique
  password  String?
  phone     String
  address   String?
  city      String?
  state     String?
  country   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime  @updatedAt
}

model Course{
  id          String    @id @default(uuid())
  title       String
  slug        String?
  description String
  image       String?
  price       BigInt
  adminId     String
  admin       Admin    @relation(fields: [adminId], references: [id])
  Module      Module[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime  @updatedAt
}

model Module{
  id          String    @id @default(uuid())
  title       String
  description String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  adminId     String
  admin       Admin    @relation(fields: [adminId], references: [id])
  lesson      lesson[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime  @updatedAt

  @@index([courseId])

}

model lesson{
  id          String    @id @default(uuid())
  title       String
  description String
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id])
  adminId     String
  admin       Admin    @relation(fields: [adminId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime  @updatedAt

  @@index([moduleId])
}


model Session{
  id        String    @id @default(uuid())
  sid       String    @unique
  data      String    @db.Text
  adminId   String?
  admin     Admin?   @relation(fields: [adminId], references: [id])
  expiresAt DateTime

}

enum Role {
  ADMIN
  SUPER_ADMIN
}